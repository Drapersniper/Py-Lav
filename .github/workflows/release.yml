name: Release

on:
    push:
        tags:
        -   '*.*.*'

defaults:
    run:
        shell: bash

jobs:
    release:
        name: Release
        strategy:
            fail-fast: false
            matrix:
                max-parallel: 1
                python-version: [3.11]
                os: [ubuntu-latest, windows-latest, macos-latest]
        runs-on: ${{ matrix.os }}
        steps:
        -   name: Checkout code
            uses: actions/checkout@v3
        -   name: Set up Python 3.11
            uses: actions/setup-python@v4
            with:
                python-version: ${{ matrix.python-version }}
        -   if: ${{ runner.os == 'Windows' }}
            name: Use GNU tar
            shell: cmd
            run: |
                echo "Adding GNU tar to PATH"
                echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
        -   name: Load cached Poetry installation
            id: cached-poetry
            uses: actions/cache@v3
            with:
                path: ~/.local # the path depends on the OS
                key: ${{ runner.os }}-poetry
        -   name: Install Poetry
            if: steps.cached-poetry.outputs.cache-hit != 'true'
            uses: snok/install-poetry@v1
            run: poetry self add "poetry-dynamic-versioning[plugin]
        -   name: Check Version
            id: check-version
            run: |
                [[ "$(poetry version --short)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || echo prerelease=true >> $GITHUB_OUTPUT
        -   name: Create Release
            uses: ncipollo/release-action@v1
            with:
                artifacts: dist/*
                token: ${{ secrets.GITHUB_TOKEN }}
                draft: false
                prerelease: steps.check-version.outputs.prerelease == 'true'
                allowUpdates: true
                omitNameDuringUpdate: true
                omitBodyDuringUpdate: true
                generateReleaseNotes: true
                replacesArtifacts: false
        -   name: Publish to PyPI
            env:
                POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
            run: poetry publish --build

    change_logs:
        name: Generate Change Logs and Release Notes
        needs: [release]
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v3
            with:
                fetch-depth: 0
                ref: master
        -   name: Set up Python 3.11
            uses: actions/setup-python@v4
            with:
                python-version: '3.11'
        -   name: Load cached Poetry installation
            id: cached-poetry
            uses: actions/cache@v3
            with:
                path: ~/.local # the path depends on the OS
                key: poetry-0 # increment to reset cache
        -   name: Install Poetry
            if: steps.cached-poetry.outputs.cache-hit != 'true'
            uses: snok/install-poetry@v1
            run: poetry self add "poetry-dynamic-versioning[plugin]
        -   uses: actions/setup-node@v3
            with:
                node-version: '14'
        -   run: npm install github-release-notes -g
        -   name: Release Notes and Change logs
            run: |
                gren release
                gren changelog
        -   name: Import GPG key
            uses: crazy-max/ghaction-import-gpg@v5
            with:
                gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
                git_user_signingkey: true
                git_commit_gpgsign: true
                git_tag_gpgsign: true
            id: import_gpg
        -   name: Get Version
            id: get-version
            run: |
                echo version="$(poetry version --short)" >> $GITHUB_OUTPUT
        -   name: Git Auto Commit
            uses: stefanzweifel/git-auto-commit-action@v4.15.4
            with:
                commit_message: '[skip ci] Update CHANGELOG.md and Release Notes for v${{steps.get-version.outputs.version}}'
                commit_options: -S
                commit_user_name: ${{ steps.import_gpg.outputs.name }}
                commit_user_email: ${{ steps.import_gpg.outputs.email }}
                commit_author: ${{ steps.import_gpg.outputs.name }} <${{ steps.import_gpg.outputs.email }}>
